{
  "totalFilesScanned": 217,
  "filesWithLegacyPatterns": 6,
  "totalPatternsFound": 12,
  "patternsByType": {
    "pub-keyword": 9,
    "interface-conformance": 1,
    "storage-api": 2
  },
  "patternsBySeverity": {
    "critical": 11,
    "warning": 1
  },
  "patterns": [
    {
      "type": "pub-keyword",
      "pattern": "pub      ",
      "location": {
        "file": "lib/deployment-script-generator.ts",
        "line": 1116,
        "column": 96,
        "context": "    elsedsseges compreecho \"✅ Ima  \n      -dir=publicoutmagemin --| xargs i*.jpeg\"  -name \".jpg\" -ome \"*\" -o -nae \"*.pnglic -namnd pub      fihen\n  &1; tll 2>ev/nun >/d imagemicommand -v   if lable)"
      },
      "severity": "critical",
      "description": "Legacy pub keyword found in production code",
      "suggestedFix": "Replace with access(all) or appropriate access modifier",
      "impact": "high"
    },
    {
      "type": "pub-keyword",
      "pattern": "pub ",
      "location": {
        "file": "lib/migration/comprehensive-system-validator.ts",
        "line": 180,
        "column": 7,
        "context": "    const legacyTestCode = `\n      pub contract TestContract {\n        pub resource Vault: Provider, Receiver {"
      },
      "severity": "critical",
      "description": "Legacy pub keyword found in production code",
      "suggestedFix": "Replace with access(all) or appropriate access modifier",
      "impact": "high"
    },
    {
      "type": "pub-keyword",
      "pattern": "pub ",
      "location": {
        "file": "lib/migration/comprehensive-system-validator.ts",
        "line": 181,
        "column": 9,
        "context": "      pub contract TestContract {\n        pub resource Vault: Provider, Receiver {\n          pub var balance: UFix64"
      },
      "severity": "critical",
      "description": "Legacy pub keyword found in production code",
      "suggestedFix": "Replace with access(all) or appropriate access modifier",
      "impact": "high"
    },
    {
      "type": "pub-keyword",
      "pattern": "pub ",
      "location": {
        "file": "lib/migration/comprehensive-system-validator.ts",
        "line": 182,
        "column": 11,
        "context": "        pub resource Vault: Provider, Receiver {\n          pub var balance: UFix64\n          "
      },
      "severity": "critical",
      "description": "Legacy pub keyword found in production code",
      "suggestedFix": "Replace with access(all) or appropriate access modifier",
      "impact": "high"
    },
    {
      "type": "pub-keyword",
      "pattern": "pub ",
      "location": {
        "file": "lib/migration/comprehensive-system-validator.ts",
        "line": 184,
        "column": 11,
        "context": "          \n          pub fun deposit(from: @FungibleToken.Vault) {\n            self.balance = self.balance + from.balance"
      },
      "severity": "critical",
      "description": "Legacy pub keyword found in production code",
      "suggestedFix": "Replace with access(all) or appropriate access modifier",
      "impact": "high"
    },
    {
      "type": "pub-keyword",
      "pattern": "pub\n",
      "location": {
        "file": "lib/quality-assurance/prompt-enhancer.ts",
        "line": 461,
        "column": 26,
        "context": "REQUIRED CADENCE 1.0 PATTERNS:\n- access(all) instead of pub\n- access(self) for private access"
      },
      "severity": "critical",
      "description": "Legacy pub keyword found in production code",
      "suggestedFix": "Replace with access(all) or appropriate access modifier",
      "impact": "high"
    },
    {
      "type": "pub-keyword",
      "pattern": "pub\n",
      "location": {
        "file": "lib/vibesdk.ts",
        "line": 1355,
        "column": 107,
        "context": "• **Resources**: Special objects that can only exist in one place at a time, ensuring digital asset security\n• **Access Control**: Uses modern access(all), access(self), access(contract) modifiers instead of legacy pub\n• **Functions**: Methods that can be called to interact with the contract, with proper pre/post conditions"
      },
      "severity": "critical",
      "description": "Legacy pub keyword found in production code",
      "suggestedFix": "Replace with access(all) or appropriate access modifier",
      "impact": "high"
    },
    {
      "type": "pub-keyword",
      "pattern": "pub ",
      "location": {
        "file": "test-legacy-prevention.js",
        "line": 15,
        "column": 5,
        "context": "    \n    pub fun deposit() {\n      account.save(<-resource, to: /storage/path)"
      },
      "severity": "critical",
      "description": "Legacy pub keyword found in production code",
      "suggestedFix": "Replace with access(all) or appropriate access modifier",
      "impact": "high"
    },
    {
      "type": "storage-api",
      "pattern": "account.save(",
      "location": {
        "file": "test-legacy-prevention.js",
        "line": 16,
        "column": 7,
        "context": "    pub fun deposit() {\n      account.save(<-resource, to: /storage/path)\n    }"
      },
      "severity": "critical",
      "description": "Legacy account.save() found in production code",
      "suggestedFix": "Replace with account.storage.save()",
      "impact": "high"
    },
    {
      "type": "pub-keyword",
      "pattern": "pub ",
      "location": {
        "file": "test-legacy-prevention.ts",
        "line": 15,
        "column": 5,
        "context": "    \n    pub fun deposit() {\n      account.save(<-resource, to: /storage/path)"
      },
      "severity": "critical",
      "description": "Legacy pub keyword found in production code",
      "suggestedFix": "Replace with access(all) or appropriate access modifier",
      "impact": "high"
    },
    {
      "type": "storage-api",
      "pattern": "account.save(",
      "location": {
        "file": "test-legacy-prevention.ts",
        "line": 16,
        "column": 7,
        "context": "    pub fun deposit() {\n      account.save(<-resource, to: /storage/path)\n    }"
      },
      "severity": "critical",
      "description": "Legacy account.save() found in production code",
      "suggestedFix": "Replace with account.storage.save()",
      "impact": "high"
    },
    {
      "type": "interface-conformance",
      "pattern": ": Provider, Receiver {",
      "location": {
        "file": "lib/migration/comprehensive-system-validator.ts",
        "line": 181,
        "column": 27,
        "context": "      pub contract TestContract {\n        pub resource Vault: Provider, Receiver {\n          pub var balance: UFix64"
      },
      "severity": "warning",
      "description": "Legacy Cadence interface conformance syntax found in production code",
      "suggestedFix": "Replace comma-separated interfaces with ampersand (&) syntax",
      "impact": "medium"
    }
  ],
  "summary": "Scanned 217 production code files and found 12 legacy patterns in 6 files.\n\n🚨 CRITICAL: 11 patterns in production code that must be fixed immediately\n⚠️  WARNING: 1 patterns in production code that should be addressed\n\nPriority: Fix critical patterns in production code first, then warnings, then suggestions.",
  "generatedAt": "2025-10-28T19:49:37.266Z",
  "version": "1.0.0"
}