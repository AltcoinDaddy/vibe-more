name: Legacy Syntax Prevention

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  legacy-syntax-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Run legacy syntax scan
      run: |
        echo "🔍 Scanning for legacy Cadence patterns..."
        npx tsx lib/migration/run-production-scan.ts
        
    - name: Run legacy prevention tests
      run: |
        echo "🧪 Running legacy prevention tests..."
        npx vitest run lib/migration/__tests__/legacy-prevention.test.ts
        
    - name: Run ESLint with legacy syntax rules
      run: |
        echo "🔧 Running ESLint with legacy syntax prevention..."
        npx eslint . --ext .ts,.tsx,.js,.jsx --max-warnings 0
        
    - name: Validate templates
      run: |
        echo "📋 Validating all templates use modern syntax..."
        node -e "
          const { templates } = require('./lib/templates');
          let hasLegacy = false;
          templates.forEach(template => {
            if (template.code.includes('pub ') || template.code.includes('pub(')) {
              console.error('❌ Legacy syntax found in template:', template.name);
              hasLegacy = true;
            }
          });
          if (hasLegacy) {
            process.exit(1);
          } else {
            console.log('✅ All templates use modern syntax');
          }
        "
        
    - name: Check prevention mechanisms
      run: |
        echo "🛡️ Verifying prevention mechanisms are in place..."
        
        # Check pre-commit hook exists
        if [ ! -f ".husky/pre-commit" ]; then
          echo "❌ Pre-commit hook missing"
          exit 1
        fi
        
        # Check ESLint rule exists
        if [ ! -f "eslint-rules/no-legacy-cadence.js" ]; then
          echo "❌ ESLint rule missing"
          exit 1
        fi
        
        # Check production scanner exists
        if [ ! -f "lib/migration/production-code-scanner.ts" ]; then
          echo "❌ Production scanner missing"
          exit 1
        fi
        
        echo "✅ All prevention mechanisms are in place"
        
    - name: Generate compliance report
      if: always()
      run: |
        echo "📊 Generating compliance report..."
        npx tsx lib/migration/run-production-scan.ts > legacy-scan-report.txt 2>&1 || true
        
        echo "## Legacy Syntax Compliance Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat legacy-scan-report.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Prevention Mechanisms Status" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Pre-commit hooks: Active" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ ESLint rules: Configured" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Automated tests: Running" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ CI/CD validation: Active" >> $GITHUB_STEP_SUMMARY